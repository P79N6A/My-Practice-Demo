起点：
1. 心态
- 不骄不躁，要知道比自己强的人有很多。
- 不要飘，要扎实地学习。
- 自己选择的路。

学习：
1. 计算机基础学科
- 数据结构：数组、链表、散列表、树、图
- 算法：排序、查找等等
- 计算机网络
- 操作系统
- 数据库技术
- 计算机组成原理
- 编译原理

可能现在你会觉得前端似乎没有什么必要去学这些。但是换个角度想想，如果这些你都不学的话，那你和那些非科班的人有什么区别呢？基础之所以叫基础，就是决定了你未来能走多远。说不定过多几年，你们就会体会出这些基础学科的作用了。（像我现在这样，太惨了吧）


学校的课程只是起到一个启蒙的作用，它的知识深度其实是远远不够的。如果想要学的好，还需要课外更加深入的学习(至少前四个是需要的)。

2. 前端基础
- Q：

![image](https://images2015.cnblogs.com/blog/841455/201512/841455-20151201235212327-794268895.jpg)

![image](https://upload-images.jianshu.io/upload_images/8026155-93791577df15f2c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

3. 用户体验/设计美感
- 看到的：字体大小、颜色、布局排版等等
- 感受到的：操作流程、速度快慢

学习方式：
1. 知其然，知其所以然

对于知识点，不仅要知道它是什么、怎么用，还要知道它的原理是什么，为什么要这样用，使用场景是什么，优缺点是什么，和其他可以实现类似效果的方法有什么异同。

举例：居中

2. 疯狂输出
- 边实践边学习。
- 做笔记，定期归纳总结。
- 写 demo：学习框架原理，搭建小型的框架。
- 分享会
- 个人博客：Github issue、CSDN、掘金等等

有时候，你看完一些教程后，就以为自己懂了，实际上当你一写代码的时候，就会发现之前在学习的时候，遗漏了很多细节没有去考虑。

所以说，学完一个知识点后，要能够把它输出出来，只有能够很好地表达出你所学的知识，才能说明你是真的懂了这个知识点。

3. 向优秀的人学习
- 做人做事
- 技术
- 逻辑思维
4. 项目
- 项目难点
- 项目架构设计：项目结构设计、组件划分、代码划分
- 代码质量
- 团队协作

> PS：觉得师兄师姐代码哪里写的不好，有哪些问题，也可以从中吸取教训。

视野：
1. 前端发展日新月异，要多去接触最新的前端知识。
2. 不要把目光停留在前端，适当接触其他方面的知识。

生活：
劳逸结合，该玩玩该吃吃该睡睡。趁年轻，多尝试。

面试：
1. 计算机基础
- 算法：leetcode 简单题、剑指 offer
- 计网
- 操作系统
- 数据库

2. 前端基础知识
3. 项目
- 至少有两个完整项目，或者一些比较完善的 demo
- 项目难点（两个左右）
4. 多去尝试下小公司的面试，积累面试经验（最好在春招之前）
